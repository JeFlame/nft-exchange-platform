{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NFTExchangePlatform.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract NFTExchangePlatform is IERC721Receiver {\n\tstruct Order {\n\t\taddress owner;\n\t\tuint256 price;\n\t}\n\n\tmapping(address => mapping(uint256 => Order)) public nftList;\n\n\tevent List(\n\t\taddress indexed seller,\n\t\taddress indexed nftAddr,\n\t\tuint256 indexed tokenId,\n\t\tuint256 price\n\t);\n\tevent Purchase(\n\t\taddress indexed buyer,\n\t\taddress indexed nftAddr,\n\t\tuint256 indexed tokenId,\n\t\tuint256 price\n\t);\n\tevent Revoke(\n\t\taddress indexed seller,\n\t\taddress indexed nftAddr,\n\t\tuint256 indexed tokenId\n\t);\n\tevent Update(\n\t\taddress indexed seller,\n\t\taddress indexed nftAddr,\n\t\tuint256 indexed tokenId,\n\t\tuint256 newPrice\n\t);\n\n\terror NeedApproval();\n\terror InvalidPrice();\n\terror TransferFailed();\n\terror IncreasePrice();\n\terror InvalidOrder();\n\terror NotOwner();\n\n\treceive() external payable {}\n\n\tfallback() external payable {}\n\n\tfunction list(address _nftAddr, uint256 _tokenId, uint256 _price) public {\n\t\tIERC721 _nft = IERC721(_nftAddr);\n\t\tif (_nft.getApproved(_tokenId) != address(this)) {\n\t\t\trevert NeedApproval();\n\t\t}\n\t\tif (_price <= 0) {\n\t\t\trevert InvalidPrice();\n\t\t}\n\n\t\tOrder storage _order = nftList[_nftAddr][_tokenId];\n\t\t_order.owner = msg.sender;\n\t\t_order.price = _price;\n\n\t\t_nft.safeTransferFrom(msg.sender, address(this), _tokenId);\n\n\t\temit List(msg.sender, _nftAddr, _tokenId, _price);\n\t}\n\n\tfunction purchase(address _nftAddr, uint256 _tokenId) public payable {\n\t\tOrder storage _order = nftList[_nftAddr][_tokenId];\n\t\tif (_order.price <= 0) {\n\t\t\trevert InvalidPrice();\n\t\t}\n\t\tif (msg.value < _order.price) {\n\t\t\trevert IncreasePrice();\n\t\t}\n\n\t\tIERC721 _nft = IERC721(_nftAddr);\n\t\tif (_nft.ownerOf(_tokenId) != address(this)) {\n\t\t\trevert InvalidOrder();\n\t\t}\n\n\t\t_nft.safeTransferFrom(address(this), msg.sender, _tokenId);\n\n\t\t(bool success, ) = payable(_order.owner).call{ value: _order.price }(\n\t\t\t\"\"\n\t\t);\n\t\tif (!success) {\n\t\t\trevert TransferFailed();\n\t\t}\n\n\t\t(bool successRefund, ) = payable(msg.sender).call{\n\t\t\tvalue: msg.value - _order.price\n\t\t}(\"\");\n\t\tif (!successRefund) {\n\t\t\trevert TransferFailed();\n\t\t}\n\n\t\tdelete nftList[_nftAddr][_tokenId];\n\n\t\temit Purchase(msg.sender, _nftAddr, _tokenId, _order.price);\n\t}\n\n\tfunction revoke(address _nftAddr, uint256 _tokenId) public {\n\t\tOrder storage _order = nftList[_nftAddr][_tokenId];\n\t\tif (_order.owner != msg.sender) {\n\t\t\trevert NotOwner();\n\t\t}\n\n\t\tIERC721 _nft = IERC721(_nftAddr);\n\t\tif (_nft.ownerOf(_tokenId) != address(this)) {\n\t\t\trevert InvalidOrder();\n\t\t}\n\n\t\t_nft.safeTransferFrom(address(this), msg.sender, _tokenId);\n\t\tdelete nftList[_nftAddr][_tokenId];\n\n\t\temit Revoke(msg.sender, _nftAddr, _tokenId);\n\t}\n\n\tfunction update(\n\t\taddress _nftAddr,\n\t\tuint256 _tokenId,\n\t\tuint256 _newPrice\n\t) public {\n\t\tif (_newPrice <= 0) {\n\t\t\trevert InvalidPrice();\n\t\t}\n\t\tOrder storage _order = nftList[_nftAddr][_tokenId];\n\t\tif (_order.owner != msg.sender) {\n\t\t\trevert NotOwner();\n\t\t}\n\n\t\tIERC721 _nft = IERC721(_nftAddr);\n\t\tif (_nft.ownerOf(_tokenId) != address(this)) {\n\t\t\trevert InvalidOrder();\n\t\t}\n\n\t\t_order.price = _newPrice;\n\n\t\temit Update(msg.sender, _nftAddr, _tokenId, _newPrice);\n\t}\n\n\tfunction onERC721Received(\n\t\taddress,\n\t\taddress,\n\t\tuint256,\n\t\tbytes memory\n\t) public virtual override returns (bytes4) {\n\t\treturn this.onERC721Received.selector;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}